name: Release

on:
  push:
    tags:
      - "v*"

env:
  OPENSSL_DIR: /home/runner/openssl
  OPENSSL_STATIC: 1
  RUST_TOOLCHAIN: stable

jobs:
  build-linux:
    name: Build package [linux]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:16.04
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          apt update -y
          apt install --no-install-recommends -y \
            git curl ca-certificates \
            make gcc g++ clang-4.0 \
            libssl-dev pkg-config zip

      - name: Build openssl
        run: |
          curl https://www.openssl.org/source/openssl-1.1.1l.tar.gz | tar xz
          cd openssl-1.1.1l
          ./config --prefix=${{ env.OPENSSL_DIR }} -static -fPIC
          make -j4
          make install

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Build package
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Collect shared
        run: |
          mkdir -p shared
          zip -jr \
            shared/subquery-linux-x86_64.zip \
            target/x86_64-unknown-linux-gnu/release/subquery

      - name: Upload shared
        uses: actions/upload-artifact@v2
        with:
          name: subquery-artifact
          path: shared

  build-win:
    name: Build package [windows]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: lukka/get-cmake@latest
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: 9d9a6f486cc7da7664117a75d01440db0088634a

      - name: Install dependencies
        run: |
          vcpkg install openssl:x64-windows-static

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: x86_64-pc-windows-msvc

      - name: Build package
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Collect shared
        run: |
          mkdir -p shared
          7z a -tzip `
            shared/subquery-windows-x86_64.zip `
            ./target/x86_64-pc-windows-msvc/release/subquery.exe

      - name: Upload shared
        uses: actions/upload-artifact@v2
        with:
          name: subquery-artifact
          path: shared

  build-macos:
    name: Build package [macos]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew install openssl
          brew install p7zip

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: x86_64-apple-darwin

      - name: Build package
        run: cargo build --release --target x86_64-apple-darwin

      - name: Collect shared
        run: |
          mkdir -p shared
          7z a -tzip \
            shared/subquery-macos-x86_64.zip \
            ./target/x86_64-apple-darwin/release/subquery

      - name: Upload shared
        uses: actions/upload-artifact@v2
        with:
          name: subquery-artifact
          path: shared

  build-macos-arm:
    name: Build package [macos-arm]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew install openssl
          brew install p7zip

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: aarch64-apple-darwin

      - name: Build package
        run: cargo build --release --target aarch64-apple-darwin

      - name: Collect shared
        run: |
          mkdir -p shared
          7z a -tzip \
            shared/subquery-macos-aarch64.zip \
            ./target/aarch64-apple-darwin/release/subquery

      - name: Upload shared
        uses: actions/upload-artifact@v2
        with:
          name: subquery-artifact
          path: shared


  complete-build:
    name: Complete build
    runs-on: ubuntu-latest
    needs: [ build-linux, build-win, build-macos, build-macos-arm ]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: subquery-artifact
          path: shared

      - name: Hash file
        run: |
          (cd shared && sha256sum * | tee sha256sums.txt)

      - uses: olegtarasov/get-tag@v2.1
        id: tag-name
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Generate template data
        run: |
          echo 'Template data:'
          jq -n \
            --arg tag "$GIT_TAG_NAME" \
            --arg sha "$SHA" \
            '{
              tag: $tag,
              sha: $sha
            }' | tee template_data.json

      - name: Render release page
        uses: jayamanikharyono/jinja-action@v0.1
        with:
          datafile: template_data.json
          path: .github/release-template.md

      - name: Publish github release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            shared/*
          body_path: ".github/release-template.md"
          token: ${{ secrets.GITHUB_TOKEN }}

  clean-artifacts:
    name: Clean artifacts
    runs-on: ubuntu-latest
    needs: [ complete-build ]
    if: always()
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: subquery-artifact

